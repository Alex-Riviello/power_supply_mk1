C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Alex\Si
                    -mplicityStudio\v4_workspace\PowerSupply_Rev01\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Alex\SimplicityStudio\v4_wo
                    -rkspace\PowerSupply_Rev01\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.5//Device/shared/si8051base;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.5//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWI
                    -DTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          //==============================================================================
  14          // enter_DefaultMode_from_RESET
  15          //==============================================================================
  16          extern void enter_DefaultMode_from_RESET(void) {
  17   1              // $[Config Calls]
  18   1              WDT_0_enter_DefaultMode_from_RESET();
  19   1              PORTS_0_enter_DefaultMode_from_RESET();
  20   1              PORTS_1_enter_DefaultMode_from_RESET();
  21   1              PBCFG_0_enter_DefaultMode_from_RESET();
  22   1              CLOCK_0_enter_DefaultMode_from_RESET();
  23   1              PCA_0_enter_DefaultMode_from_RESET();
  24   1              PCACH_0_enter_DefaultMode_from_RESET();
  25   1              PCACH_1_enter_DefaultMode_from_RESET();
  26   1              PCACH_2_enter_DefaultMode_from_RESET();
  27   1              TIMER01_0_enter_DefaultMode_from_RESET();
  28   1              TIMER16_3_enter_DefaultMode_from_RESET();
  29   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  30   1              SMBUS_0_enter_DefaultMode_from_RESET();
  31   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  32   1              // [Config Calls]$
  33   1      
  34   1      
  35   1      }
  36          
  37          
  38          //================================================================================
  39          // WDT_0_enter_DefaultMode_from_RESET
  40          //================================================================================
  41          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  42   1              // $[WDTCN - Watchdog Timer Control]
  43   1              //Disable Watchdog with key sequence
  44   1              WDTCN = 0xDE; //First key
  45   1              WDTCN = 0xAD; //Second key
  46   1      }
  47          
  48          //================================================================================
  49          // CLOCK_0_enter_DefaultMode_from_RESET
  50          //================================================================================
  51          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 2   

  52   1              // $[CLKSEL - Clock Select]
  53   1              // CLKSL (Clock Source Select) = HFOSC (Clock derived from the Internal
  54   1              //     High-Frequency Oscillator.)
  55   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
  56   1              //     selected clock source divided by 1.)
  57   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
  58   1      }
  59          
  60          //================================================================================
  61          // PORTS_0_enter_DefaultMode_from_RESET
  62          //================================================================================
  63          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  64   1      
  65   1      
  66   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__NOT_SKIPPED | P0SKIP_B2__NOT_SKIPPED
  67   1                       | P0SKIP_B3__NOT_SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  68   1                       | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
  69   1      
  70   1              P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL | P0MDIN_B3__DIGITAL
  71   1                              | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL | P0MDIN_B6__ANALOG;
  72   1      
  73   1              P0 |= P0_B6__HIGH; //For ADC, P0 must be set to high
  74   1      
  75   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN | P0MDOUT_B2__PUSH_PULL
  76   1                       | P0MDOUT_B3__PUSH_PULL | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
  77   1                       | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
  78   1      }
  79          
  80          //================================================================================
  81          // PORTS_1_enter_DefaultMode_from_RESET
  82          //================================================================================
  83          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  84   1      
  85   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN | P1MDOUT_B2__OPEN_DRAIN
  86   1                       | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
  87   1                       | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
  88   1      
  89   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
  90   1                       | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__SKIPPED
  91   1                       | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
  92   1      }
  93          
  94          //================================================================================
  95          // PBCFG_0_enter_DefaultMode_from_RESET
  96          //================================================================================
  97          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
  98   1              // $[XBR0 - Port I/O Crossbar 0]
  99   1      
 100   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 101   1                       | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 102   1                       | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 103   1      
 104   1              XBR1 = XBR1_PCA0ME__CEX0_CEX1 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 105   1                       | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED; //CEX0 and CEX1 are connected to I0 pints (P0.2, P0.3)
 106   1      
 107   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED; //Disable pull-ups if problem (Since I have 
             -some on board)
 108   1      }
 109          
 110          //================================================================================
 111          // SMBUS_0_enter_DefaultMode_from_RESET
 112          //================================================================================
 113          extern void SMBUS_0_enter_DefaultMode_from_RESET(void) {
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 3   

 114   1              // $[SMB0CF - SMBus 0 Configuration]
 115   1              /*
 116   1              // SMBCS (SMBus Clock Source Selection) = TIMER1 (Timer 1 Overflow.)
 117   1              // ENSMB (SMBus Enable) = ENABLED (Enable the SMBus module.)
 118   1              // SMBFTE (SMBus Free Timeout Detection Enable) = FREE_TO_ENABLED (Enable
 119   1              //     bus free timeouts. The bus the bus will be considered free if SCL and
 120   1              //     SDA remain high for more than 10 SMBus clock source periods.)
 121   1              // SMBTOE (SMBus SCL Timeout Detection Enable) = SCL_TO_ENABLED (Enable
 122   1              //     SCL low timeouts.)
 123   1              // EXTHOLD (SMBus Setup and Hold Time Extension Enable) = ENABLED (Enable
 124   1              //     SDA extended setup and hold times.)
 125   1              */
 126   1              SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 127   1              SMB0CF |= SMB0CF_SMBCS__TIMER1
 128   1                       | SMB0CF_ENSMB__ENABLED | SMB0CF_SMBFTE__FREE_TO_ENABLED | SMB0CF_SMBTOE__SCL_TO_ENABLED
 129   1                       | SMB0CF_EXTHOLD__ENABLED;
 130   1              // [SMB0CF - SMBus 0 Configuration]$
 131   1      
 132   1              // $[SMB0ADR - SMBus 0 Slave Address]
 133   1              /*
 134   1              // GC (General Call Address Enable) = IGNORED (General Call Address is
 135   1              //     ignored.)
 136   1              // SLV (SMBus Hardware Slave Address) = 0x6B
 137   1              */
 138   1              SMB0ADR = SMB0ADR_GC__IGNORED | (0x6B << SMB0ADR_SLV__SHIFT);
 139   1              // [SMB0ADR - SMBus 0 Slave Address]$
 140   1      
 141   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 142   1              /*
 143   1              // EHACK (Hardware Acknowledge Enable) = ADR_ACK_AUTOMATIC (Automatic
 144   1              //     slave address recognition and hardware acknowledge is enabled.)
 145   1              // SLVM (SMBus Slave Address Mask) = 0x7F
 146   1              */
 147   1              SMB0ADM = SMB0ADM_EHACK__ADR_ACK_AUTOMATIC | (0x7F << SMB0ADM_SLVM__SHIFT);
 148   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
 149   1      
 150   1              // $[SMB0TC - SMBus 0 Timing and Pin Control]
 151   1              // [SMB0TC - SMBus 0 Timing and Pin Control]$
 152   1      
 153   1      
 154   1      }
 155          
 156          //================================================================================
 157          // PCA_0_enter_DefaultMode_from_RESET
 158          //================================================================================
 159          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 160   1              // $[PCA Off]
 161   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 162   1              // [PCA Off]$
 163   1      
 164   1              // $[PCA0MD - PCA Mode]
 165   1              /*
 166   1              // CIDL (PCA Counter/Timer Idle Control) = NORMAL (PCA continues to
 167   1              //     function normally while the system controller is in Idle Mode.)
 168   1              // ECF (PCA Counter/Timer Overflow Interrupt Enable) = OVF_INT_DISABLED
 169   1              //     (Disable the CF interrupt.)
 170   1              // CPS (PCA Counter/Timer Pulse Select) = SYSCLK (System clock.)
 171   1              */
 172   1              PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_CPS__SYSCLK;
 173   1              // [PCA0MD - PCA Mode]$
 174   1      
 175   1              // $[PCA0CENT - PCA Center Alignment Enable]
 176   1              /*
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 4   

 177   1              // CEX0CEN (CEX0 Center Alignment Enable) = CENTER (Center-aligned.)
 178   1              // CEX1CEN (CEX1 Center Alignment Enable) = CENTER (Center-aligned.)
 179   1              // CEX2CEN (CEX2 Center Alignment Enable) = EDGE (Edge-aligned.)
 180   1              */
 181   1              PCA0CENT = PCA0CENT_CEX0CEN__CENTER | PCA0CENT_CEX1CEN__CENTER | PCA0CENT_CEX2CEN__EDGE;
 182   1              // [PCA0CENT - PCA Center Alignment Enable]$
 183   1      
 184   1              // $[PCA0CLR - PCA Comparator Clear Control]
 185   1              // [PCA0CLR - PCA Comparator Clear Control]$
 186   1      
 187   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 188   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 189   1      
 190   1              // $[PCA0H - PCA Counter/Timer High Byte]
 191   1              /*
 192   1              // PCA0H (PCA Counter/Timer High Byte) = 0x04
 193   1              */
 194   1              PCA0H = (0x04 << PCA0H_PCA0H__SHIFT);
 195   1              // [PCA0H - PCA Counter/Timer High Byte]$
 196   1      
 197   1              // $[PCA0POL - PCA Output Polarity]
 198   1              // [PCA0POL - PCA Output Polarity]$
 199   1      
 200   1              // $[PCA0PWM - PCA PWM Configuration]
 201   1              /*
 202   1              // CLSEL (Cycle Length Select) = 11_BITS (11 bits.)
 203   1              // ECOV (Cycle Overflow Interrupt Enable) = COVF_MASK_ENABLED (A PCA
 204   1              //     interrupt will be generated when COVF is set.)
 205   1              */
 206   1              PCA0PWM &= ~PCA0PWM_CLSEL__FMASK;
 207   1              PCA0PWM |= PCA0PWM_CLSEL__11_BITS
 208   1                       | PCA0PWM_ECOV__COVF_MASK_ENABLED;
 209   1              // [PCA0PWM - PCA PWM Configuration]$
 210   1      
 211   1              // $[PCA On]
 212   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 213   1              // [PCA On]$
 214   1      
 215   1      }
 216          
 217          //================================================================================
 218          // PCACH_0_enter_DefaultMode_from_RESET
 219          //================================================================================
 220          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 221   1              // $[PCA0 Settings Save]
 222   1              uint8_t PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
 223   1              uint8_t PCA0PWM_ARSEL_save = PCA0PWM & PCA0PWM_ARSEL__BMASK;
 224   1      
 225   1              // Turn PCA0 off while updating PCACH0
 226   1              PCA0CN0 &= ~PCA0CN0_CR__BMASK;
 227   1              // Select Capture/Compare register)
 228   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 229   1              // [PCA0 Settings Save]$
 230   1      
 231   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 232   1              /*
 233   1              // CAPN (Channel 0 Capture Negative Function Enable) = DISABLED (Disable
 234   1              //     negative edge capture.)
 235   1              // ECCF (Channel 0 Capture/Compare Flag Interrupt Enable) = ENABLED
 236   1              //     (Enable a Capture/Compare Flag interrupt request when CCF0 is set.)
 237   1              // MAT (Channel 0 Match Function Enable) = DISABLED (Disable match
 238   1              //     function.)
 239   1              // PWM16 (Channel 0 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 5   

 240   1              //     11-bit PWM selected.)
 241   1              // CAPP (Channel 0 Capture Positive Function Enable) = DISABLED (Disable
 242   1              //     positive edge capture.)
 243   1              // ECOM (Channel 0 Comparator Function Enable) = ENABLED (Enable
 244   1              //     comparator function.)
 245   1              // PWM (Channel 0 Pulse Width Modulation Mode Enable) = ENABLED (Enable
 246   1              //     PWM function.)
 247   1              // TOG (Channel 0 Toggle Function Enable) = DISABLED (Disable toggle
 248   1              //     function.)
 249   1              */
 250   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__ENABLED | PCA0CPM0_MAT__DISABLED
 251   1                       | PCA0CPM0_PWM16__8_BIT | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 252   1                       | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 253   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 254   1      
 255   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 256   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 257   1      
 258   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 259   1              /*
 260   1              // PCA0CPH0 (PCA Channel 0 Capture Module High Byte) = 0x04
 261   1              */
 262   1              PCA0CPH0 = (0x04 << PCA0CPH0_PCA0CPH0__SHIFT);
 263   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 264   1      
 265   1              // $[Auto-reload]
 266   1              PCA0PWM |= PCA0PWM_ARSEL__AUTORELOAD;
 267   1      
 268   1              /*
 269   1              // PCA0CPH0 (PCA Channel 0 Capture Module High Byte) = 0x04
 270   1              */
 271   1              PCA0CPH0 = (0x04 << PCA0CPH0_PCA0CPH0__SHIFT);
 272   1      
 273   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 274   1              // [Auto-reload]$
 275   1      
 276   1              // $[PCA0 Settings Restore]
 277   1              PCA0CN0 |= PCA0CN0_CR_save;
 278   1              PCA0PWM |= PCA0PWM_ARSEL_save;
 279   1              // [PCA0 Settings Restore]$
 280   1      
 281   1      }
 282          
 283          //================================================================================
 284          // PCACH_1_enter_DefaultMode_from_RESET
 285          //================================================================================
 286          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 287   1              // $[PCA0 Settings Save]
 288   1              uint8_t PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
 289   1              uint8_t PCA0PWM_ARSEL_save = PCA0PWM & PCA0PWM_ARSEL__BMASK;
 290   1      
 291   1              // Turn PCA0 off while updating PCACH1
 292   1              PCA0CN0 &= ~PCA0CN0_CR__BMASK;
 293   1              // Select Capture/Compare register)
 294   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 295   1              // [PCA0 Settings Save]$
 296   1      
 297   1              PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__ENABLED | PCA0CPM1_MAT__DISABLED
 298   1                       | PCA0CPM1_PWM16__8_BIT | PCA0CPM1_CAPP__DISABLED | PCA0CPM1_ECOM__ENABLED
 299   1                       | PCA0CPM1_PWM__ENABLED | PCA0CPM1_TOG__DISABLED;
 300   1      
 301   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 302   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 6   

 303   1      
 304   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 305   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 306   1      
 307   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 308   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 309   1      
 310   1              PCA0CPH1 = (0x04 << PCA0CPH1_PCA0CPH1__SHIFT);
 311   1              PCA0PWM |= PCA0PWM_ARSEL__AUTORELOAD;
 312   1              PCA0CPH1 = (0x04 << PCA0CPH1_PCA0CPH1__SHIFT);
 313   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 314   1              // $[Auto-reload]
 315   1              // [Auto-reload]$
 316   1      
 317   1              // $[PCA0 Settings Restore]
 318   1              PCA0CN0 |= PCA0CN0_CR_save;
 319   1              PCA0PWM |= PCA0PWM_ARSEL_save;
 320   1              // [PCA0 Settings Restore]$
 321   1      
 322   1      
 323   1      }
 324          
 325          //================================================================================
 326          // PCACH_2_enter_DefaultMode_from_RESET
 327          //================================================================================
 328          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
 329   1              // $[PCA0 Settings Save]
 330   1              uint8_t PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
 331   1              uint8_t PCA0PWM_ARSEL_save = PCA0PWM & PCA0PWM_ARSEL__BMASK;
 332   1      
 333   1              // Turn PCA0 off while updating PCACH2
 334   1              PCA0CN0 &= ~PCA0CN0_CR__BMASK;
 335   1              // Select Capture/Compare register)
 336   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 337   1              // [PCA0 Settings Save]$
 338   1      
 339   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 340   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 341   1      
 342   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 343   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 344   1      
 345   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 346   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 347   1      
 348   1              // $[Auto-reload]
 349   1              // [Auto-reload]$
 350   1      
 351   1              // $[PCA0 Settings Restore]
 352   1              PCA0CN0 |= PCA0CN0_CR_save;
 353   1              PCA0PWM |= PCA0PWM_ARSEL_save;
 354   1              // [PCA0 Settings Restore]$
 355   1      
 356   1      
 357   1      }
 358          
 359          //================================================================================
 360          // TIMER01_0_enter_DefaultMode_from_RESET
 361          //================================================================================
 362          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 363   1              // $[Timer Initialization]
 364   1              //Save Timer Configuration
 365   1              uint8_t TCON_save = TCON;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 7   

 366   1              //Stop Timers
 367   1              TCON &= TCON_TR0__BMASK & TCON_TR1__BMASK;
 368   1      
 369   1              // [Timer Initialization]$
 370   1      
 371   1              // $[TH0 - Timer 0 High Byte]
 372   1              /*
 373   1              // TH0 (Timer 0 High Byte) = 0x38
 374   1              */
 375   1              TH0 = (0x38 << TH0_TH0__SHIFT);
 376   1              // [TH0 - Timer 0 High Byte]$
 377   1      
 378   1              // $[TL0 - Timer 0 Low Byte]
 379   1              /*
 380   1              // TL0 (Timer 0 Low Byte) = 0x13
 381   1              */
 382   1              TL0 = (0x13 << TL0_TL0__SHIFT);
 383   1              // [TL0 - Timer 0 Low Byte]$
 384   1      
 385   1              // $[TH1 - Timer 1 High Byte]
 386   1              /*
 387   1              // TH1 (Timer 1 High Byte) = 0x34
 388   1              */
 389   1              TH1 = (0x34 << TH1_TH1__SHIFT);
 390   1              // [TH1 - Timer 1 High Byte]$
 391   1      
 392   1              // $[TL1 - Timer 1 Low Byte]
 393   1              /*
 394   1              // TL1 (Timer 1 Low Byte) = 0x34
 395   1              */
 396   1              TL1 = (0x34 << TL1_TL1__SHIFT);
 397   1              // [TL1 - Timer 1 Low Byte]$
 398   1      
 399   1              // $[Timer Restoration]
 400   1              //Restore Timer Configuration
 401   1              TCON = TCON_save;
 402   1      
 403   1              // [Timer Restoration]$
 404   1      
 405   1      
 406   1      }
 407          
 408          //================================================================================
 409          // TIMER16_3_enter_DefaultMode_from_RESET
 410          //================================================================================
 411          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 412   1              // $[Timer Initialization]
 413   1              // Save Timer Configuration
 414   1              uint8_t TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 415   1              // Stop Timer
 416   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 417   1              // [Timer Initialization]$
 418   1      
 419   1              // $[TMR3CN0 - Timer 3 Control]
 420   1              // [TMR3CN0 - Timer 3 Control]$
 421   1      
 422   1              // $[TMR3H - Timer 3 High Byte]
 423   1              // [TMR3H - Timer 3 High Byte]$
 424   1      
 425   1              // $[TMR3L - Timer 3 Low Byte]
 426   1              // [TMR3L - Timer 3 Low Byte]$
 427   1      
 428   1              // $[TMR3RLH - Timer 3 Reload High Byte]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 8   

 429   1              /*
 430   1              // TMR3RLH (Timer 3 Reload High Byte) = 0x38
 431   1              */
 432   1              TMR3RLH = (0x38 << TMR3RLH_TMR3RLH__SHIFT);
 433   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 434   1      
 435   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 436   1              /*
 437   1              // TMR3RLL (Timer 3 Reload Low Byte) = 0x9E
 438   1              */
 439   1              TMR3RLL = (0x9E << TMR3RLL_TMR3RLL__SHIFT);
 440   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 441   1      
 442   1              // $[TMR3CN0]
 443   1              /*
 444   1              // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 445   1              */
 446   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 447   1              // [TMR3CN0]$
 448   1      
 449   1              // $[Timer Restoration]
 450   1              // Restore Timer Configuration
 451   1              TMR3CN0 |= TMR3CN0_TR3_save;
 452   1              // [Timer Restoration]$
 453   1      
 454   1      
 455   1      }
 456          
 457          //================================================================================
 458          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 459          //================================================================================
 460          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 461   1              // $[CKCON0 - Clock Control]
 462   1              /*
 463   1              // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_4 (System clock divided by 4.)
 464   1              // T0M (Timer 0 Clock Select) = PRESCALE (Counter/Timer 0 uses the clock
 465   1              //     defined by the prescale field, SCA.)
 466   1              // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 467   1              //     byte uses the clock defined by the T2XCLK bit in TMR2CN.)
 468   1              // T2ML (Timer 2 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 low
 469   1              //     byte uses the clock defined by the T2XCLK bit in TMR2CN.)
 470   1              // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 471   1              //     byte uses the clock defined by the T3XCLK bit in TMR3CN0.)
 472   1              // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 473   1              //     byte uses the clock defined by the T3XCLK bit in TMR3CN0.)
 474   1              // T1M (Timer 1 Clock Select) = PRESCALE (Timer 1 uses the clock defined
 475   1              //     by the prescale field, SCA.)
 476   1              */
 477   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE | CKCON0_T2MH__EXTERNAL_CLOCK
 478   1                       | CKCON0_T2ML__EXTERNAL_CLOCK | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 479   1                       | CKCON0_T1M__PRESCALE;
 480   1              // [CKCON0 - Clock Control]$
 481   1      
 482   1              // $[TMOD - Timer 0/1 Mode]
 483   1              /*
 484   1              // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 485   1              // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 486   1              //     Auto-Reload)
 487   1              // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 488   1              //     on the clock defined by T0M in the CKCON0 register.)
 489   1              // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 490   1              //     irrespective of INT0 logic level.)
 491   1              // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 9   

 492   1              //     on the clock defined by T1M in the CKCON0 register.)
 493   1              // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 494   1              //     irrespective of INT1 logic level.)
 495   1              */
 496   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER | TMOD_GATE0__DISABLED
 497   1                       | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 498   1              // [TMOD - Timer 0/1 Mode]$
 499   1      
 500   1              // $[TCON - Timer 0/1 Control]
 501   1              /*
 502   1              // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 503   1              */
 504   1              TCON |= TCON_TR1__RUN;
 505   1              // [TCON - Timer 0/1 Control]$
 506   1      
 507   1      
 508   1              // $[CKCON0 - Clock Control 0]
 509   1              /*
 510   1              // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_4 (System clock divided by 4.)
 511   1              // T0M (Timer 0 Clock Select) = PRESCALE (Counter/Timer 0 uses the clock
 512   1              //     defined by the prescale field, SCA.)
 513   1              // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 514   1              //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 515   1              // T2ML (Timer 2 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 low
 516   1              //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 517   1              // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 518   1              //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 519   1              // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 520   1              //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 521   1              // T1M (Timer 1 Clock Select) = PRESCALE (Timer 1 uses the clock defined
 522   1              //     by the prescale field, SCA.)
 523   1              */
 524   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE | CKCON0_T2MH__EXTERNAL_CLOCK
 525   1                       | CKCON0_T2ML__EXTERNAL_CLOCK | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 526   1                       | CKCON0_T1M__PRESCALE;
 527   1              // [CKCON0 - Clock Control 0]$
 528   1      
 529   1      }
 530          
 531          //================================================================================
 532          // INTERRUPT_0_enter_DefaultMode_from_RESET
 533          //================================================================================
 534          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 535   1              // $[EIE1 - Extended Interrupt Enable 1]
 536   1              /*
 537   1              // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 538   1              //     ADC0 Conversion Complete interrupt.)
 539   1              // EWADC0 (ADC0 Window Comparison Interrupt Enable) = DISABLED (Disable
 540   1              //     ADC0 Window Comparison interrupt.)
 541   1              // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 542   1              //     interrupts.)
 543   1              // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 544   1              //     interrupts.)
 545   1              // EMAT (Port Match Interrupts Enable) = DISABLED (Disable all Port Match
 546   1              //     interrupts.)
 547   1              // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 548   1              //     (Disable all PCA0 interrupts.)
 549   1              // ESMB0 (SMBus (SMB0) Interrupt Enable) = ENABLED (Enable interrupt
 550   1              //     requests generated by SMB0.)
 551   1              // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 552   1              //     generated by the TF3L or TF3H flags.)
 553   1              */
 554   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
C51 COMPILER V9.53.0.0   INITDEVICE                                                        11/07/2017 22:14:26 PAGE 10  

 555   1                       | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__ENABLED
 556   1                       | EIE1_ESMB0__ENABLED | EIE1_ET3__ENABLED;
 557   1              // [EIE1 - Extended Interrupt Enable 1]$
 558   1      
 559   1              // $[EIP1 - Extended Interrupt Priority 1]
 560   1              // [EIP1 - Extended Interrupt Priority 1]$
 561   1      
 562   1              // $[IE - Interrupt Enable]
 563   1              /*
 564   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 565   1              //     to its individual mask setting.)
 566   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 567   1              //     interrupt 0.)
 568   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 569   1              //     interrupt 1.)
 570   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 571   1              //     interrupts.)
 572   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 573   1              //     interrupt.)
 574   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 575   1              //     interrupt.)
 576   1              // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 577   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 578   1              */
 579   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 580   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__DISABLED | IE_ES0__DISABLED;
 581   1              // [IE - Interrupt Enable]$
 582   1      
 583   1              // $[IP - Interrupt Priority]
 584   1              // [IP - Interrupt Priority]$
 585   1      
 586   1      
 587   1      }
 588          
 589          
 590          
 591          // $[Library Includes]
 592          // [Library Includes]$
 593          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
